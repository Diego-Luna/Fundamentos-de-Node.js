///////////////////////////////// Variables de entorno /////////////////////////////////

Las variables de entorno son las variables que vienen desde fuera del sistema y se pueden referenciar con “process.env.VARIABLE”, estas deben ir con MAYÚSCULAS.

-------
EL linkd e dotenv: https://www.npmjs.com/package/dotenv
Para descargarlo:
- npm install dotenv


En caso de querer tener variables de entorno en un archivo, puede utilizar dotenv, de esta manera puede crear el archivo .env y ahí configurar las variables necesarias.
Y luego accederlas donde las necesite, ejemplo:

file.js:
- require('dotenv').config();
- console.log(process.env.NAME);

.env
- NAME = 'u name'

Se suele utilizar mucho para variables de bases de datos, usuarios, etc.
Y en caso de usar variables con información sensible, tener en cuenta nunca enviar el archivo .env al repositorio (:
el archivo .env deve estar en la raiz del proyecto.

-------

///////////////////////////////// Variables de entorno /////////////////////////////////

///////////////////////////////// Herramientas para ser más felices: Nodemon y PM2 /////////////////////////////////

nodemon Link:https://nodemon.io/

Nos ayuda apoder ejecutar el codigo de node miestras estas mos en desarrollo, cada ves que guardemos se ejecutara el programa.
PAra poder lo usar :(en la terminal)
- nodemon (nombre del arvhivo / o la direccion)

pm2 Link :https://pm2.keymetrics.io/

Nos ayuda con node, en produccon por que nos da una vicion mas clara del proyecto :

- pm2 start

- pm2 status
- pm2 log

///////////////////////////////// Herramientas para ser más felices: Nodemon y PM2 /////////////////////////////////

///////////////////////////////// Callbacks /////////////////////////////////

ES IMPORTANTISIMO ENCADENARLAS,
QUE EL CALLBACK DE CADA FUNCION SEA LLAMAR A LA SIGUIENTE FUNCION Y ASI SUCESIVAMENTE!

///////////////////////////////// Callbacks /////////////////////////////////

///////////////////////////////// funcion es recursivas /////////////////////////////////

Una funcion recursiva nos funciona para no sufrir con los Callbacks:
ejemplo:

- function conversacion(nombre, veses,callback){
-   if (veses > 0){
-     Hablar(function () {
-       conversacion(nombre, --veses, callback);
-     })
-   }else{
-     Adios(nombre, callback);
-   }
- }

///////////////////////////////// funcion es recursivas /////////////////////////////////

///////////////////////////////// Globals /////////////////////////////////

En Node tenemos el objeto "global" que contiene los metodos y propiedades basicas que usamos Node;ej(setTimeOut)

  "global" es un equivalente de this en el navegador

En Node "this" es un alias de global

- this === global //true

Algunos metodos que se incluyen en el "global" objeto son:

* setTimeOut: se encarga de llamar a otra funcion despues de un periodo de tiempo.
* setInterval: llama a tra funcion cada intervalo de tiempo.
* setImmediate: equivalente a setTimeOut pero con tiempo 0.
* clearTimeOut: detiene un setTimeOut.
* clearInterval: detiene un setInterval.

///////////////////////////////// Globals /////////////////////////////////

///////////////////////////////// File system /////////////////////////////////

En node podemos crear, editar y eliminar archivos desde el servidor. La mayoria de estas acciones tienen metodos sincronos y asincronos, por ejemplo readFile y readFileSync.

“Use readFile siempre que sea posible, readFileSync bloquea el hilo mientras la solicitud es resuelta.”

estan el el archivo : "modulos/fs.js"

///////////////////////////////// File system /////////////////////////////////

///////////////////////////////// Console /////////////////////////////////

Con console podemos imprimir todo tipo de valores por
nuestra terminal.

- console.log: recibe cualquier tipo y lo muestra en el consola.
- console.info: es equivalente a log pero es usado para informar.
- console.error: es equivalente a log pero es usado para errores.
- console.warn: es equivalente a log pero es usado para warning.
- console.table: muestra una tabla a partir de un objeto.
- console.count: inicia un contador autoincremental.
- console.countReset: reinicia el contador a 0.
- console.time: inicia un cronometro en ms.
- console.timeEnd: Finaliza el cronometro.
- console.group: permite agrupar errores mediante identación.
- console.groupEnd: finaliza la agrupación.
- console.clear: Limpia la consola.

///////////////////////////////// Console /////////////////////////////////

///////////////////////////////// Errores (Try/Catch) /////////////////////////////////

Cuando se genera un error, node propaga el error hacia arriba, hasta que esta es caputado. si el error no se captura node se detiene.

Siempre que sea posible debemos capturar todos los errores que se puedan generar en nuestros hilos.

ejemplos: "modulos/errores.js"

///////////////////////////////// Errores (Try/Catch) /////////////////////////////////

///////////////////////////////// Procesos hijo /////////////////////////////////

En node podemos crear procesos hijos que ejecuten cualquier accion de nuestro sistema operativo, como si nos encontraramos en la linea de comandos.

Podemos llamar a exec para ejecuciones sencillas:

- const { exec } = require('child_process')
- exec('ls', (e, stdout) => {
-     (e) ?
-     console.log(e) :
-     console.log(stdout)
- })

Podemos llamar a spawn para obtener el proceso: La ventaja de este enfoque es que obtienes mayor control del proceso, y del estado en el que se encuenta

- const { spawn } = require('child_process')
- const myprocess = spawn('ls')

- process.stdout.on("data", data => console.log(data.toString()));
- process.on("exit", () => console.log("process end"));

ejemplos: "modulos/procesoHijo.js"

///////////////////////////////// Procesos hijo /////////////////////////////////

///////////////////////////////// Módulos nativos en C++ /////////////////////////////////

compilamos codigo nativo de c++, usando node.

ejemplo: "modulos/nativo"

///////////////////////////////// Módulos nativos en C++ /////////////////////////////////

///////////////////////////////// HTTP /////////////////////////////////

Ceramos un servidor con HTTP usando node.

ejemplo: "modulos/http.js"

///////////////////////////////// HTTP /////////////////////////////////

///////////////////////////////// OS /////////////////////////////////

OS, es un modulo de sistema operativo que podemos trabajar con node.

ejemplo: "modulos/os.js"

///////////////////////////////// OS /////////////////////////////////

///////////////////////////////// Process /////////////////////////////////

Process
El objecto process es una instancia de EventEmitter; podemos suscribirnos a el para escuchar eventos de node.

UncaughtException: Permite capturar cualquier error que no fue caputurado previamente. Esto evita que Node cierre todos los hijos al encontrar un error no manejado.

- process.on('uncaughtException', (error, origen) => console.log(error, origen));

exit: Se ejecuta cuando node detiene el eventloop y cierra su proceso principal.

- process.on('exit', () => console.log('Adios'));

///////////////////////////////// Process /////////////////////////////////

///////////////////////////////// npm /////////////////////////////////

Para descargar modulos hay que entrar a npm : https://www.npmjs.com/

adonde hay modulos geniales para usar :D.

///////////////////////////////// npm /////////////////////////////////

///////////////////////////////// bcrypt /////////////////////////////////

bcrypt: https://www.npmjs.com/package/bcrypt
es un modulo de node para incryptar consaseñas y mas.
ejemplo: "paquetes/utiles/bcrypt.js"

///////////////////////////////// bcrypt /////////////////////////////////

///////////////////////////////// moment /////////////////////////////////

moment: https://www.npmjs.com/package/moment
Es un modulo de node, que nos permite trabajar con fechas.
ejemplos: "paquetes/utiles/moment"

///////////////////////////////// moment /////////////////////////////////

///////////////////////////////// sharp /////////////////////////////////

sharp: https://www.npmjs.com/package/sharp

es un modulo de node para el cotrol de images.
ejemplo: paquetes/utiles/sharp.js"

///////////////////////////////// sharp /////////////////////////////////

///////////////////////////////// Buffers /////////////////////////////////

Los Buffers nos permiten trabajar los datos en curdo(en binario) lo cual hace que sea mas rapido, y no se almasene en memoria cada cambio.

ejemplo: "memoria/buffer.js"

///////////////////////////////// Buffers /////////////////////////////////

